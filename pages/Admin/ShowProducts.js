import React from "react";
import Head from "next/head";
import { ThemeProvider } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import theme from "../../src/theme/theme";
import FullLayout from "../../src/layouts/FullLayout";
import AllProductsTable from "../../src/components/dashboard/AllProductsTable";
import Product from "../../models/Product";
import mongoose from "mongoose";
import { ToastContainer, toast } from "react-toastify";
import cookies from "next-cookies";
import Admin from "../../models/Admin";
import SuperAdmin from "../../models/SuperAdmin";
import Error from "next/error";

const AllProducts = ({ tshirt, hoddies, mugs, stickers, Check }) => {
  if (Check == false) {
    return <Error statusCode={404} />;
  } else
    return (
      <>
        <Head>
          <title>All Products</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/logo.ico" />
        </Head>
        <ToastContainer
          position="top-center"
          autoClose={2000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
        />
        <ThemeProvider theme={theme}>
          <CssBaseline>
            <FullLayout>
              <AllProductsTable Products={tshirt} title={"T-Shirts"} />
              <AllProductsTable Products={hoddies} title={"Hoddies"} />
              <AllProductsTable Products={mugs} title={"Mugs"} />
              <AllProductsTable Products={stickers} title={"Stickers"} />
            </FullLayout>
          </CssBaseline>
        </ThemeProvider>
      </>
    );
};

export async function getServerSideProps(context) {
  if (!mongoose.connection.readyState) {
    mongoose.connect(process.env.MONGO_URI);
  }
  const { user } = cookies(context);
  let Check = false;
  if (user) {
    try {
      const PromiseAdmin = Admin.findOne(
        {
          _id: user.userId,
          email: user.email,
        },
        { password: 0, resetToken: 0 }
      );
      const PromiseSuperAdmin = SuperAdmin.findOne(
        {
          _id: user.userId,
          email: user.email,
        },
        { password: 0, resetToken: 0 }
      );
      const isAdmin = await PromiseAdmin;
      const isSuperAdmin = await PromiseSuperAdmin;

      if (isAdmin || isSuperAdmin) Check = true;
    } catch (error) {
      console.log(error);
    }
  }
  if (Check) {
    const PromiseTshirt = Product.find(
      { category: "T-shirt" },
      { sellQty: 0, adminId: 0, createdAt: 0, updatedAt: 0 }
    )
      .sort({ createdAt: -1 })
      .limit(10);
    const PromiseHoddies = Product.find(
      { category: "Hoodies" },
      { sellQty: 0, adminId: 0, createdAt: 0, updatedAt: 0 }
    )
      .sort({ createdAt: -1 })
      .limit(10);
    const PromiseMugs = Product.find(
      { category: "Mugs" },
      { sellQty: 0, adminId: 0, createdAt: 0, updatedAt: 0 }
    )
      .sort({ createdAt: -1 })
      .limit(10);
    const PromiseStickers = Product.find(
      { category: "Sticker" },
      { sellQty: 0, adminId: 0, createdAt: 0, updatedAt: 0 }
    )
      .sort({ createdAt: -1 })
      .limit(10);

    const tshirt = await PromiseTshirt;
    const hoddies = await PromiseHoddies;
    const mugs = await PromiseMugs;
    const stickers = await PromiseStickers;

    return {
      props: {
        Check,
        tshirt: JSON.parse(JSON.stringify(tshirt)),
        hoddies: JSON.parse(JSON.stringify(hoddies)),
        mugs: JSON.parse(JSON.stringify(mugs)),
        stickers: JSON.parse(JSON.stringify(stickers)),
      },
    };
  } else
    return {
      props: {
        Check,
      },
    };
}

export default AllProducts;
