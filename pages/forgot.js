import React, { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import { ToastContainer, toast } from "react-toastify";
import Head from "next/head";
import Image from "next/image";
import Inputs from "../components/Form/Input";

const Forgot = () => {
  const [forgetEmail, setForgetEmail] = useState("");
  const [Newpassword, setNewpassword] = useState("");
  const [cpassword, setcpassword] = useState("");
  const [Credentials, setCredentials] = useState({
    password: "",
    cpassword: "",
  });
  const router = useRouter();

  useEffect(() => {
    if (localStorage.getItem("token")) {
      router.push("/");
    }
  }, []);

  const forgotInput = {
    key: 2,
    name: "email",
    type: "email",
    placeholder: "Email",
    errorMessage: "It should be a valid email address!",
    label: "Email",
    required: true,
  };
  const CredentialsInputs = [
    {
      key: 2,
      name: "email",
      type: "email",
      placeholder: "Email",
      errorMessage: "It should be a valid email address!",
      label: "Email",
      required: true,
    },
    {
      key: 8,
      name: "password",
      type: "password",
      placeholder: "Password",
      errorMessage:
        "Password sholud be 3-16 characters and shoud include any 2 special character!",
      label: "Password",
      pattern: "^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,16}$",
      required: true,
    },
  ];

  const onCredintialsChange = (event) => {
    setCredentials({ ...Credentials, [event.target.name]: event.target.value });
  };
  const forgetenPassword = async (event) => {
    event.preventDefault();
    console.log(forgetEmail);
    let data = { forgetEmail, sendMail: true };
    let response = await fetch(
      `${process.env.NEXT_PUBLIC_HOST}/api/Account/forgot`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          authorization: `${localStorage.getItem("token")}`,
        },
        body: JSON.stringify(data),
      }
    );
    response = await response.json();
    console.log(response);
    if (response.success) {
      toast.success(
        "Password reset instructions is send to your email. Thank you!",
        {
          position: "top-center",
          autoClose: 2000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        }
      );
    } else {
      toast.error("Sorry, Error Ouccer!", {
        position: "top-center",
        autoClose: 3000,
        hideProgressBar: true,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
      return;
    }
  };

  const resetPassword = async (event) => {
    event.preventDefault();
    if (Newpassword === cpassword) {
      console.log(Newpassword);
      let data = { forgetEmail, sendMail: false, Newpassword };
      let response = await fetch(
        `${process.env.NEXT_PUBLIC_HOST}/api/Account/forgot`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            authorization: `${localStorage.getItem("token")}`,
          },
          body: JSON.stringify(data),
        }
      );
      response = await response.json();
      console.log(response);
      if (response.success) {
        toast.success("Your password is reset. Thank you!", {
          position: "top-center",
          autoClose: 2000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
        router.push(`/login`);
      } else {
        toast.error("Sorry, Error Ouccer!", {
          position: "top-center",
          autoClose: 3000,
          hideProgressBar: true,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
        return;
      }
    }
  };

  return (
    <>
      <Head>
        <title>Forget Password</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.png" />
      </Head>
      <ToastContainer
        position="top-center"
        autoClose={2000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
      <div className="flex min-h-full">
        <div className="flex flex-1 flex-col justify-center py-12 px-4 sm:px-6 lg:flex-none lg:px-8 xl:pl-52">
          <div className="mx-auto w-full max-w-sm lg:w-96">
            <div className="sm:mx-auto sm:w-full sm:max-w-md">
              <div className="bg-white py-8 px-2 shadow sm:rounded-lg sm:px-6">
                <h2 className="text-center text-3xl font-bold tracking-tight text-gray-900">
                  Forgot your password?
                </h2>
                <p className="mt-6 text-center text-sm text-gray-600">
                  Don't fret! Just type in your email and we will send you a
                  code to reset your password!
                </p>
                <form className="mt-10 space-y-6" action="#" method="POST">
                  <div className="relative rounded-md border border-gray-300 px-3 py-2 shadow-sm focus-within:border-indigo-600 focus-within:ring-1 focus-within:ring-indigo-600">
                    <label
                      htmlFor="password"
                      className="absolute -top-2 left-2 -mt-px inline-block bg-white px-1 text-sm font-medium text-gray-900"
                    >
                      Your Email
                    </label>
                    <div className="mt-1">
                      <input
                        id="email"
                        name="email"
                        type="email"
                        autoComplete="email"
                        required
                        className="block w-full border-0 p-0 text-gray-900 placeholder-gray-500 focus:ring-0 sm:text-sm"
                      />
                    </div>
                  </div>

                  <div>
                    <button
                      type="submit"
                      className="group relative flex w-full items-center justify-center overflow-hidden rounded-md border border-indigo-600 px-4 py-2 text-sm font-medium text-indigo-600 hover:bg-gray-50 hover:text-white"
                    >
                      <span className="duration-400 ease absolute left-0 top-1/2 block h-0 w-full bg-indigo-600 opacity-100 transition-all group-hover:top-0 group-hover:h-full"></span>
                      <span className="ease absolute right-0 flex h-10 w-10 translate-x-full transform items-center justify-start duration-300 group-hover:translate-x-0">
                        <svg
                          className="h-5 w-5"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth="2"
                            d="M14 5l7 7m0 0l-7 7m7-7H3"
                          ></path>
                        </svg>
                      </span>
                      <span class="relative">Recover Password</span>
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
        <div className="relative hidden w-0 flex-1 md:block">
          <img
            className="absolute inset-0 h-full w-full object-contain"
            src="../icons/forgot.svg"
            alt=""
          />
        </div>
      </div>
    </>
  );
};

export default Forgot;