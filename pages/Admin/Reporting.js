import React, { useEffect, useState } from "react";
import Head from "next/head";
import { ThemeProvider } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import theme from "../../src/theme/theme";
import FullLayout from "../../src/layouts/FullLayout";
import OrderReports from "../../src/components/dashboard/OrderReports";
import Order from "../../models/Order";
import cookies from "next-cookies";
import Admin from "../../models/Admin";
import SuperAdmin from "../../models/SuperAdmin";
import Error from "next/error";
import mongoose from "mongoose";

const Reporting = ({ orders, Check }) => {
  if (Check == false) {
    return <Error statusCode={404} />;
  } else
    return (
      <>
        <Head>
          <title>Reports</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/logo.ico" />
        </Head>
        <ThemeProvider theme={theme}>
          <CssBaseline>
            <FullLayout>
              <OrderReports orders={orders} title={"All Orders"} />
            </FullLayout>
          </CssBaseline>
        </ThemeProvider>
      </>
    );
};
export async function getServerSideProps(context) {
  if (!mongoose.connection.readyState) {
    mongoose.connect(process.env.MONGO_URI);
  }

  const { user } = cookies(context);
  let Check = false;
  if (user) {
    try {
      const PromiseAdmin = Admin.findOne(
        {
          _id: user.userId,
          email: user.email,
        },
        { password: 0, resetToken: 0 }
      );
      const PromiseSuperAdmin = SuperAdmin.findOne(
        {
          _id: user.userId,
          email: user.email,
        },
        { password: 0, resetToken: 0 }
      );
      const isAdmin = await PromiseAdmin;
      const isSuperAdmin = await PromiseSuperAdmin;

      if (isAdmin || isSuperAdmin) Check = true;
    } catch (error) {
      console.log(error);
    }
  }
  if (Check) {
    const Orders = await Order.find({}).select({
      _id: 0,
      email: 1,
      orderID: 1,
      firstName: 1,
      lastName: 1,
      mame: 1,
      amount: 1,
      status: 1,
    })
    .sort({ createdAt: -1 });
  console.log(Orders);;
    return {
      props: {
        Check,
        orders: JSON.parse(JSON.stringify(Orders)),
      },
    };
  } else
    return {
      props: {
        Check,
      },
    };
}
export default Reporting;
